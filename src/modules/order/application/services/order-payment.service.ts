import { Inject, Injectable, OnApplicationBootstrap } from '@nestjs/common';

import { LokiLoggerService } from 'src/common/logger/logger.service';
import { IOrderRepository } from '../../domain/repositories/order.repository';
import { ICallbackSender } from '../ports/callback-sender.port';

@Injectable()
export class OrderPaymentService implements OnApplicationBootstrap {
  constructor(
    @Inject('IOrderRepository')
    private readonly orderRepo: IOrderRepository,

    @Inject('ICallbackSender')
    private readonly callbackSender: ICallbackSender,
    private readonly logger: LokiLoggerService,
  ) {}

  onApplicationBootstrap() {
    this.logger.log(
      'üöÄ Tron Service fully bootstrapped!',
      'OrderPaymentService',
    );
  }

  async confirmIfPaid(address: string, amount: number): Promise<void> {
    const order = await this.orderRepo.findByAddress(address);
    if (!order) {
      this.logger.warn(`–ó–∞–∫–∞–∑ –ø–æ –∞–¥—Ä–µ—Å—É ${address} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    if (order.status === 'paid') {
      this.logger.warn(`–ó–∞–∫–∞–∑ #${order.id} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω`);
      return;
    }

    if (amount < order.amountExpected) {
      this.logger.warn(
        `–ü–æ–ª—É—á–µ–Ω–æ ${amount}, –æ–∂–∏–¥–∞–ª–æ—Å—å ${order.amountExpected} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.id}`,
      );
      return;
    }

    if (!order.canBePaid(amount)) {
      this.logger.warn(
        `–ó–∞–∫–∞–∑ #${order.id} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω ‚Äî —É—Å–ª–æ–≤–∏–µ canBePaid()`,
      );
      return;
    }

    await this.orderRepo.markAsPaid(order.id);
    this.logger.log({
      level: 'info',
      message: `–ó–∞–∫–∞–∑ #${order.id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω`,
    });

    if (order.callbackUrl) {
      this.logger.log({
        level: 'info',
        message: `–û—Ç–ø—Ä–∞–≤–∫–∞ callback –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.id} –Ω–∞ ${order.callbackUrl}`,
      });
      await this.callbackSender.send(order.callbackUrl, {
        orderId: order.id,
        status: 'paid',
        amountReceived: amount,
      });
    }
  }
}
